  - javascript controlled
  - instantiate and control multiple independent players on the same page with just html
  - single instance flash app that streams mp3s

  ----------
  try it out
  ----------
  
  go into a hosted directory (e.g. ~/Sites on a mac)
  
      $ git clone git://github.com/whtevn/playa.git

  and then direct your browser to the resulting folder

      the result can be seen at http://newqdev.com/playa/Playa.html

  ----------------
  current behavior
  ----------------

  - a playa has access to these actions:
      - play
      - pause
      - next
      - previous
      - stop

  Play behavior
  -------------
  pushing play in one playa starts playing whatever the current track in that player.

  pushing play in another player after a player has started
  pauses the current player (retaining playhead)

  the new player will start playing at whatever track and
  playhead it has stored (track 1 time 0 by default, of course)

  pushing play in the original player pauses the now
  current player (retaining playhead) and resumes play at the held place of the original player


  advancing the track
  -------------------
  pushing "next" or "previous" while playing will play the "next" or "previous" track

  if currently on the first or last track and playing, and "next" or "previous" takes
  it back to itself, play will stop. this is the same behavior as itunes. blame them.

  if another playa is playing, pushing "next" or "previous" advances the playlist to
  the appropriate place, but does not alter current play. if that playa is later played,
  the updated playhead will be used.


  using Playa
  -----------
  1. require the necessary js files (including jquery)

    <script type="text/javascript" src="javascript/jquery-1.3.2.min.js" /> </script>
    <script type="text/javascript" src="javascript/flash_interface.js" /></script>
    <script type="text/javascript" src="javascript/playa.js" /></script>

  2. embed the swf

    <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
            id="Playa" width="0" height="0"
            codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab">
        <param name="movie" value="Playa.swf" />
        <param name="allowScriptAccess" value="sameDomain" />
        <embed src="script/Playa.swf" quality="high" bgcolor="#869ca7"
          width="0" height="0" name="Playa" 
          play="true" loop="false" quality="high" allowScriptAccess="sameDomain"
          type="application/x-shockwave-flash"
          pluginspage="http://www.macromedia.com/go/getflashplayer">
        </embed>
    </object>

  
  3. set up a player using a list of songs in html
    
    <ul class="playa" id="first_instance">
      <li class="play">play</li>
      <li class="pause">pause</li>
      <li class="stop">stop</li>
      <li class="previous">previous</li>
      <li class="next">next</li>
      <li>
        <ul class="playlist">
          <li>
            <a class="track" href="resources/01.mp3">song 1</a>
          </li>
          <li>
            <a class="track" href="resources/02.mp3">song 2</a>
          </li>
        </ul>
      </li>
    </ul>

    the 'track' designator can be on any element, but if it does not
    have a href attribute (as above), then it requires an anchor tag
    as one of its children

    e.g.
        <ul class="playlist">
          <li class="track">
            <a href="resources/01.mp3">song 1</a>
            <img src="resources/01.jpg" />
          </li>
          <li class="track">
            <a href="resources/02.mp3">song 2</a>
            <img src="resources/02.jpg" />
          </li>
        </ul>

    the "active" attribute is put alongside the "track" attribute when a
    song becomes active in a particular playa.

  - or by using json

    <ul class="playa" id="second_instance">
      <li class="play">play</li>
      <li class="pause">pause</li>
      <li class="stop">stop</li>
      <li class="previous">previous</li>
      <li class="next">next</li>
      <input type="hidden"
             class="playlist"
             value="['resources/06.mp3',
                     {url: 'resources/07.mp3'}]"
       />
    </ul>

  tracks



  the elements and heirarchy do not matter.
  the class name is the only thing that matters.

